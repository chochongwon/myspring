<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd
  http://www.springframework.org/schema/security http://www.springframework.org/schema/security-4.2.xsd"
	id="WebApp_ID" version="3.1">

    
	<!-- spring configLocation 설정 -->
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		 classpath:config/context/rootContext.xml
		 classpath:config/context/applicationContext.xml
		 classpath:config/context/applicationContext-language.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- DispatcherServlet -->
	<!-- DispatcherServlet은 여러개 정의가능하며 load-on-startup의 값이 작은 숫자로 된 DispatcherServlet부터 실행하게 된다. -->		
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/context/applicationContext-default.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 호출되는 파일명은 servlet-name속성에서 정의된 이름 + "-servlet.xml"이다. 
	     즉, 여기서는 dispatcher-servlet.xml이란 파일을 호출한다.  -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/context/applicationContext-dispatcher.xml</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<!-- 요청되는 URL중에 ".do"로 끝나는 모든 요청은 dispatcher에서 처리함 -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
		
	<!-- 인코딩 필터 설정 "/*"로 들어오는 모든 것들에 대해 UTF-8 적용 -->
	<filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
    </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
	<!-- log4j 설정파일을 호출한다. -->
	<!-- <listener>
		<listener-class>org.springframework.web.Log4jConfigListener</listener-class>
	</listener> 
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/config/log/log4j.xml</param-value>
	</context-param> -->
	     
	<!-- Spring security 이중 로그인을 막기 위한 리스너 클래스이다 -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
	
	<!-- Spring security -->
	<!-- <security:http auto-config='true'>
		<security:intercept-url pattern="/favicon.ico" access="ROLE_ANONYMOUS" /> 
		<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
	</security:http> -->
	
     <!-- Add JBoss EAP -->
     <distributable />
     
	<!-- 프로젝트 실행시 초기 실행되는 파일 -->
	<!-- <welcom-file-list>
		<welcom-file>index.jsp</welcom-file>
	</welcom-file-list> -->
</web-app>
