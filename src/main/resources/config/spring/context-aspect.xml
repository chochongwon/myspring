<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="
        	http://www.springframework.org/schema/beans 
        	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        	http://www.springframework.org/schema/context 
        	http://www.springframework.org/schema/context/spring-context-4.3.xsd 
        	http://www.springframework.org/schema/aop 
        	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
    
    <!-- 
    	action-servlet.xml의 <AOP 부분>과 동일하다. 
    	왜 똑같은 것을 두번 설정을 했냐면 root context와 servlet context의 차이 때문이다.
    	SpringMVC 개발에서는 이렇게 설정하는것이 원칙이다.
    	
    	두개의 차이점은 다음과 같다.
		Root Application Context
		- 최상단 컨텍스트 
		- 서로 다른 서블릿 컨텍스트에서 공유하는 bean을 등록 
		- 웹에서 사용되는 컨트롤러 등을 등록
		- 서블릿 컨텍스트에서 등록된 bean을 사용할 수 없으며, 
		  서블릿 컨텍스트와 루트 컨텍스트에서 동일한 bean을 설정할 경우, 서블릿 컨텍스트에서 설정한 bean만 동작
		
		Servlet Context
		- 서블릿에서 이용되는 컨텍스트
		- 여기서 정의된 bean은 다른 서블릿 컨텍스트와 공유할 수 없음
    -->
    <!--
    	AOP를 보면 Controller, Service, DAO의 3개 영역에서 모두 사용이 되어야 하는데, 
    	한쪽의 컨텍스트에서만 설정하게 되면 다른 컨텍스트에서는 동작하지 않게 된다.
    	예를 들어 action-servlet.xml에만 설정을 하면 Controller의 로그만 출력될 것이고, 
    	context-aspect.xml에서만 설정하면 Service, DAO에서만 로그가 출력이 될 것이다.
     -->
	<aop:aspectj-autoproxy proxy-target-class="true"/> <!-- 이 설정을 하지 않으면 @Aspect 가 정상 동작하지 않는다. -->
	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" /> -->
	<bean id="loggerAspect" class="myspring.sample.aspect.LoggerAspect" />
    <!-- <bean id="testAdvice" class="myspring.app.aop.TestAdvice" /> -->
</beans>

