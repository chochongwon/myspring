<?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"
	default-autowire="byType">
        
 	<!--
 		READ_UNCOMMITTED : SELECT 문장을 수행하는 경우 해당 데이터에 Shared Lock이 걸리지 않는다.
 		 어떤 사용자가 A라는 데이터르,ㄹ B라는 데이터로 변경하는 동안 다른사용자는 B라는 아직 완료되지 않은
 		 (Uncommitted 혹은 Dirty) 데이터 B를 읽을 수 있다. 
 		READ_COMMITTED : SELECT 문장이 수행되는 동안 해당 데이터에 Shared Lock이 걸린다. 
 		 어떤 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 해당 데이터에 접근할 수 없다.
 		REPEATABLE_READ : 트랜잭션이 완료될 때까지 SELECT문장이 사용하는 모든 데이터에 Shared Lock이 걸린다.
 		 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정이 불가능한다. 
 		ISOLATION_SERIALIZABLE : 트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 Shared Lock이 걸리므로
 		 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정 및 입력이 불가능하다.
 		 예를들어, Repeatable Read 의 경우 1 ~ 10 사이에 해당되는 데이터에 대한 UPDATE가 가능했다. 하지만 이 Level에서는
 		 UPDATE 작업도 허용되지 않는다.
 	 -->
 	<!-- stored job-meta in database -->    
 	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
 		<property name="transactionManager" ref="transactionManager" />
 		<property name="dataSource" ref="dataSource" />
 		<property name="tablePrefix" value="BATCH_" />
 		<property name="isolationLevelForCreate" value="READ_COMMITTED"/>
 		<property name="databaseType" value="ORACLE" />
 	</bean>
 	 <!-- 
    <batch:job-repository id="jobRepository"
        transaction-manager="transactionManager"
        data-source="dataSource"
        isolation-level-for-create="READ_COMMITTED"
        table-prefix="BATCH_" />
 	 -->
 	 
    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
        p:lobHandler-ref="oracleLobhandler"
        p:dataSource-ref="dataSource" />

    <bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator"
        p:jobLauncher-ref="jobLauncher" p:jobExplorer-ref="jobExplorer"
        p:jobRepository-ref="jobRepository" p:jobRegistry-ref="jobRegistry" />

    <bean id="jobParametersConverter" class="myspring.common.batch.core.CustomJobParametersConverter" />

    <!-- <bean id="logAdvice" class="org.springframework.batch.sample.common.LogAdvice" /> -->
    <!-- <bean id="eventAdvice" class="org.springframework.batch.sample.jmx.StepExecutionApplicationEventAdvice" /> -->

    <bean id="jobRegistry" class="myspring.common.batch.core.SimpleBatchJobRegistryImpl">
        <property name="serverId" value="mybatch"/> <!-- ${batch.server.id} -->
    </bean>

    <bean class="org.springframework.batch.core.configuration.support.AutomaticJobRegistrar">
        <property name="applicationContextFactories">
            <bean class="org.springframework.batch.core.configuration.support.ClasspathXmlApplicationContextsFactoryBean">
                <property name="resources" value="classpath:jobs/**/*Job.xml"/>
            </bean>
        </property>
        <property name="jobLoader">
            <bean class="org.springframework.batch.core.configuration.support.DefaultJobLoader">
                <property name="jobRegistry" ref="jobRegistry"/>
            </bean>
        </property>
    </bean>

    <!-- JobRegistry Remote Exporter -->
    <bean id="jobRegistryExporter" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter" autowire="no">
        <property name="service" ref="jobRegistry" />
        <property name="serviceInterface" value="com.cn.framework.batch.core.SimpleJobRegistry" />
    </bean> 
    
    <!-- Async Job Launcher -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
        <property name="taskExecutor" ref="taskExecutor"/>
    </bean>

    <!-- Async Batch Job Runner -->
    <bean id="jobRunner" class="myspring.common.batch.launch.SimpleBatchJobRunnerImpl">
        <property name="jobRepository" ref="jobRepository" />
        <property name="jobLauncher" ref="jobLauncher" />
        <property name="jobRegistry" ref="jobRegistry" />
        <property name="jobParametersConverter" ref="jobParametersConverter" />
    </bean>

    <!-- Job Runner Remote Exporter -->
    <!-- HTTP Invoker 방화벽과 같이 네트워크 제약이 있는 상황에서 Spring 기반의 서비스를 공개하거나 접근하려는 경우 사용 -->
    <bean id="jobRunnerExporter" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter" autowire="no">
        <property name="service" ref="jobRunner" />
        <property name="serviceInterface" value="myspring.framework.batch.launch.JobRunner" />
    </bean> 
    
</beans>