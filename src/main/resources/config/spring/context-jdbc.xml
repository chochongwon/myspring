<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd">
    
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:config/properties/jdbc.properties</value>
		</property>
	</bean>
	
    <!-- MySQL 설정 -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://IP주소/스키마"/>
        <property name="username" value="아이디"/>
        <property name="password" value="비밀번호"/>
    </bean> -->
    
    <!-- 오라클 설정 -->
	<!--
		initialSize : 초기에 생성될 커넥션 개수
		maxActive : 커넥션풀이 제공할 최대 커넥션 개수
		maxIdle : 사용되지 않고 풀에 저장될 수 있는 최대 커넥션 개수, 음수일 경우 제한없음
		minIdle : 사용되지 않고 풀에 저장될 수 있는 최소 커넥션 개수
		maxWait : 풀에 커넥션이 존재하지 않을 때, 커넥션이 풀에 다시 리턴되기까지 대기시간. 1/1000단위, -1일 경우 무한대기.
		minEvictableIdleTimeMillis : 사용되지 않은 커넥션을 추출할 때, 이 속성에서 지정한 시간이상 비활성화 상태인 커넥션만 추출한다.
		                                 양수가 아닌 경우 비활성화된 시간으로는 풀에서 제거되지 않는다.
		timeBetweenEvictionRunsMillis : 사용되지 않은 커넥션을 추출하는 쓰레드의 실행주기를 설정. 양수가 아닌 경우 실행되지 않음
		numTestsPerEvictionRun : 사용되지 않은 커넥션을 몇 개 검사할지 지정
		testOnBorrow : true일 경우, 커넥션 풀에서 커넥션을 가져올 경우, 커넥션이 유효한지 검사
		testOnReturn : true일 경우, 커넥션 풀에 커넥션을 반환할 때, 커넥션이 유효한지 검사
		testWhileIdle : true일 경우, 비활성화 커넥션을 추출할 때, 커넥션이 유효한지 검사해서 유효하지 않은 커넥션을 풀에서 제거. 
	 -->
    <bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="30" />
		<property name="maxIdle" value="10" />
		<property name="maxWait" value="1000" />
		<property name="defaultAutoCommit" value="false" />
    </bean>
    
    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<property name="sqlPrefix" value="SQL         :"/>
			</bean>
		</property>
	</bean>
	<!-- 
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
    </bean>
     -->
	<!-- JDBC 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
	<property name="username" value="xeuser"/>
	<property name="password" value="xeuser"/>
	</bean>
	-->	
	<!-- JNDI DataSource -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	<property name="jndiName">
	<value>jdbc/oracleDB</value>
	</property>
	<property name="resourceRef" value="true"/>
	</bean> -->	
	
	<!-- 트랜잭션 매니저 bean을 등록한다. -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />		
	</bean>
	
    <!-- Spring JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor" lazy-init="true" autowire="no" />
    
    <bean id="oracleLobhandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true"  autowire="no">
        <property name="nativeJdbcExtractor">
            <ref local="nativeJdbcExtractor"/>
        </property>
    </bean>
    
    <bean id="mssqlLobhandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"  autowire="no">
    </bean>

    <bean id="mysqlLobhandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"  autowire="no">
    </bean>
    
	<!-- 어노테이션 기반의 트랜잭션을 사용한다. -->
	<tx:annotation-driven transaction-manager="transactionManager" />
    <!-- <tx:annotation-driven transaction-manager="transactionManager" mode="aspectj"/>  -->   
    
    
	<!-- create job-meta tables automatically -->
	<!--
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:schema/batch-schema-drop-oracle.sql" />
		<jdbc:script location="classpath:schema/batch-schema-oracle.sql" />
		<jdbc:script location="classpath:schema/drop-orders-oracle.sql" />	
		<jdbc:script location="classpath:schema/drop-player-oracle.sql" />
		<jdbc:script location="classpath:schema/create-orders-oracle.sql" />	
		<jdbc:script location="classpath:schema/create-player-oracle.sql" />		 
		<jdbc:script location="classpath:schema/insert_player.sql" />	
	</jdbc:initialize-database>
	 -->
</beans>
 
