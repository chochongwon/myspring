<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- <mapper>마다 namespace 속성을 이용하여 <mapper>간 유일성을 보장해야 한다. -->
<mapper namespace="sample">
	<!-- parameterType 은 입력변수 -->
	<!-- resultType 은 결과값을 담을 변수. 기본적으로 MAP을 사용하나 경우에 따라서 DTO (VO나 TO)를 혼용하여 사용한다. -->
	<select id="selectBoardList" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	        SELECT IDX
	                , TITLE 
	                , CONTENTS
	                , HIT_CNT
	                , CREA_DTM
	                , CREA_ID
	         FROM TB_BOARD
	        WHERE DEL_GB = 'N'
	        ORDER BY IDX DESC
	    ]]>
	</select>
	
	<!-- 전자정부 프레임워크 페이징 처리 -->	
	<select id="selectBoardListPaging" parameterType="hashmap" resultType="hashmap">
	    <include refid="common.pagingPre"/>
	    <![CDATA[
	        SELECT ROW_NUMBER() OVER (ORDER BY IDX DESC) RNUM,
	                 IDX,
	                 TITLE,
	                 HIT_CNT,
	                 CREA_DTM
	        FROM TB_BOARD
	        WHERE DEL_GB = 'N'
	    ]]>
	    <include refid="common.pagingPost"/>
	</select>
	
	<!--
		useGeneratedKeys : (입력(insert, update)에만 적용) 데이터베이스에서 내부적으로 생성한 키 
		(예를들어 MySQL또는 SQL Server와 같은 RDBMS의 자동 증가 필드)를 받는 JDBC getGeneratedKeys메소드를 사용하도록 설정하다. 
		디폴트는 false 이다.		
	 -->
	 <!-- 
	 	useGeneratedKeys는 MyBatis에서 제공하는 기능으로 DB에 입력(insert, update)시 
	 	데이터베이스에서 자동적으로 증가되는 키를 받는 JDBC의 getGeneratedKeys() 메서드를 사용하도록 하는것이다.
	  -->
	 <!-- 
	 	useGeneratedKeys는 MyBatis에서 제공하는 기능으로 DB에 입력(insert, update)시 
	 	데이터베이스에서 자동적으로 증가되는 키를 받는 JDBC의 getGeneratedKeys() 메서드를 사용하도록 하는것이다.
	 	여기서 자동적으로 증가가 되는 키는 MySql이나 MSSql의 Auto Increment가 설정된 컬럼을 의미한다. 
	  -->
	 <!-- 
	 	keyProperty는 getGeneratedKeys() 메서드나 insert구문의 selectKey에 의해 선택된 키를 셋팅하는 속성이다. 
	 	사실 MySql이나 MsSQL처럼 자동생성키 컬럼을 지원하는 DB에서는 이 두가지만 사용하면 되지만, 
	 	Oracle과 같이 자동생성키 기능이 없는 경우는 추가적인 작업을 해야 한다. 그것이 <selectkey> 부분이다.
	 	먼저 쿼리를 보면 기존에 insert문에서 바로 사용되던 시퀀스를 따로 빼서 값을 사용하는것을 볼 수 있다. 
	 	그리고 기존의 insert 구문에서는 시퀀스를 바로 사용하는것이 아니라 #{IDX}라고 변수형태로 바뀐것을 볼 수 있다. 
	 	<selectKey> 구문을 통해서 다음 게시글 번호를 가져온 후, 그 값은 파라미터에 다시 저장된다. 
	 	우리가 DAO에서 쿼리를 호출할 때, insert("sample.insertBoard", map); 이렇게 호출을 했었는데, 
	 	여기서 map이 insert를 할때 사용되는 파라미터인데 이 map에 selectKey로 가져온 IDX값이 다시 입력이 되도록 되어있다.
	 	이렇게 되면 insert를 할때 먼저 SELECT SEQ_TB_BOARD_IDX.NEXTVAL FROM DUAL 쿼리가 먼저 실행되고 
	 	(order 속성이 BEFORE로 되어있기 때문에) 그 값이 MAP에 IDX라는 키로 저장된다. (keyProperty="KEY") 
	 	그 후, insert 쿼리가 실행이 되고 IDX 값이 담긴 map이 그대로 ServiceImpl 영역까지 전달이 된다. 
	 	즉, insert를 수행하고 난 후에는 파라미터였던 map에 IDX 값이 담겨있게 된다. 
	 	그렇기 때문에 FileUtils 클래스에서 방금 insert가 되었던 IDX값을 사용할 수 있다. 
	  -->
	<insert id="insertBoard" parameterType="hashmap" useGeneratedKeys="false" keyProperty="IDX">    
		<selectKey keyProperty="IDX" resultType="string" order="BEFORE">
	        SELECT SEQ_TB_BOARD_IDX.NEXTVAL FROM DUAL
	    </selectKey>
		<![CDATA[
			INSERT INTO TB_BOARD
			(
				IDX,
			    TITLE, 
			    CONTENTS, 
			    HIT_CNT, 
			    DEL_GB, 
			    CREA_DTM, 
			    CREA_ID
			)
			VALUES
			(
				#{IDX}, 
			    #{TITLE}, 
			    #{CONTENTS}, 
			    0, 
			    'N', 
			    SYSDATE, 
			    'Admin'
			)
		]]>
	</insert>
     
	<update id="updateHitCnt" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD 
			SET
				HIT_CNT = NVL(HIT_CNT, 0) + 1
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
 
	<select id="selectBoardDetail" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	     SELECT IDX
	             , TITLE
	             , CONTENTS
	             , HIT_CNT	             
	             , CREA_DTM
	             , CREA_ID
	      FROM TB_BOARD
	     WHERE IDX = #{IDX}       
	    ]]>
	</select>
	
	<update id="updateBoard" parameterType="hashmap">
	    <![CDATA[
	        UPDATE TB_BOARD
	             SET TITLE = #{TITLE}
	                , CONTENTS = #{CONTENTS}
	        WHERE IDX = #{IDX}   
	    ]]>
	</update>
	
	<update id="deleteGbBoard" parameterType="hashmap">
	    <![CDATA[
	        UPDATE TB_BOARD
	             SET DEL_GB = 'Y'
	        WHERE IDX = #{IDX}
	    ]]>
	</update>
	
	<delete id="deleteBoard" parameterType="hashmap">
	    <![CDATA[
	        DELETE 
	         FROM TB_BOARD
	        WHERE IDX = #{IDX}
	    ]]>
	</delete>
	
	<insert id="insertFile" parameterType="hashmap" useGeneratedKeys="false">
	    <![CDATA[
	        INSERT INTO TB_FILE
	        (
	            IDX,
	            BOARD_IDX,
	            ORIGINAL_FILE_NAME,
	            STORED_FILE_NAME,
	            FILE_SIZE,
	            CREA_ID
	        )
	        VALUES
	        (
	            SEQ_TB_FILE_IDX.NEXTVAL,
	            #{BOARD_IDX},
	            #{ORIGINAL_FILE_NAME},
	            #{STORED_FILE_NAME},
	            #{FILE_SIZE},
	            'Admin'
	        )
	    ]]>
	</insert>
	
	<select id="selectFileList" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	        SELECT
	            IDX,
	            ORIGINAL_FILE_NAME,
	            ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
	        FROM
	            TB_FILE
	        WHERE
	            BOARD_IDX = #{IDX}
	            AND DEL_GB = 'N'
	    ]]>
	</select>
	
	<update id="deleteFileList" parameterType="hashmap">
	    <![CDATA[
	        UPDATE TB_FILE 
	             SET DEL_GB = 'Y'
	         WHERE BOARD_IDX = #{IDX} 
	    ]]>
	</update>
 
	<update id="updateFile" parameterType="hashmap">
	    <![CDATA[
	        UPDATE TB_FILE 
	             SET DEL_GB = 'N'
	        WHERE IDX = #{FILE_IDX}  
	    ]]>
	</update>
	
</mapper>